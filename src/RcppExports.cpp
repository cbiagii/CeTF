// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// tolerance
float tolerance(float a, float b, float c, int tolType);
RcppExport SEXP _CeTF_tolerance(SEXP aSEXP, SEXP bSEXP, SEXP cSEXP, SEXP tolTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type a(aSEXP);
    Rcpp::traits::input_parameter< float >::type b(bSEXP);
    Rcpp::traits::input_parameter< float >::type c(cSEXP);
    Rcpp::traits::input_parameter< int >::type tolType(tolTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(tolerance(a, b, c, tolType));
    return rcpp_result_gen;
END_RCPP
}
// pcitC
arma::sp_mat pcitC(arma::sp_mat& cor, int tolType);
RcppExport SEXP _CeTF_pcitC(SEXP corSEXP, SEXP tolTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type cor(corSEXP);
    Rcpp::traits::input_parameter< int >::type tolType(tolTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(pcitC(cor, tolType));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CeTF_tolerance", (DL_FUNC) &_CeTF_tolerance, 4},
    {"_CeTF_pcitC", (DL_FUNC) &_CeTF_pcitC, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_CeTF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
